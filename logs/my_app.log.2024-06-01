[2m2024-06-01T04:33:15.346521Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m[1mEngine::with_parameter_data
[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
(engine-id: 0) Engine::with_parameter_data elapsed time: 185.579ms

[2m2024-06-01T04:33:15.346887Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * npv calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.347065Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * fx exposure calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.347243Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.348133Z[0m [33m WARN[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
quantlib\src\pricing_engines\engine.rs:1798
<TAG>
engine-id: 0
instrument-types: Futures / Bond / VanillaPut
currencies: KRW
underlying-codes: KOSPI2

(Engine::calculate -> theta calculation)
There are instruments whose maturity is within the evaluation_date + theta_day (= 2024-09-29 16:30:00.0 +09:00:00) 

The instruments are as follows:
KOSPI2 Fut Mar21: 2024-06-14 0:00:00.0 +09:00:00
KOSPI2 Call Sep21: 2024-09-13 0:00:00.0 +09:00:00

For the theta calculation for the above instruments, 
the evaluation date is bumped to 2024-06-14 0:00:00.0 +09:00:00 which is the shortest maturity of the above instruments. 
Note that the theta calculation period may be too small to get accurate theta.

[2m2024-06-01T04:33:15.348388Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * theta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.348723Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.349080Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.349254Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T04:33:15.365571Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_structure calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.02s)
[2m2024-06-01T04:33:15.390357Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.04s)
[2m2024-06-01T04:33:15.404816Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_structure calculation is done (engine id: 0, time = 0.01s whole time elapsed: 0.06s)
[2m2024-06-01T04:33:15.423011Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_matrix calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.08s)
[2m2024-06-01T04:33:15.429426Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mexamples_toymodel[0m[2m:[0m Application finished 299.4372ms
[2m2024-06-01T06:07:12.423013Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m[1mEngine::with_parameter_data
[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
(engine-id: 0) Engine::with_parameter_data elapsed time: 184.4377ms

[2m2024-06-01T06:07:12.423376Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * npv calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.423549Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * fx exposure calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.423728Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.424588Z[0m [33m WARN[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
quantlib\src\pricing_engines\engine.rs:1798
<TAG>
engine-id: 0
instrument-types: Futures / Bond / VanillaPut
currencies: KRW
underlying-codes: KOSPI2

(Engine::calculate -> theta calculation)
There are instruments whose maturity is within the evaluation_date + theta_day (= 2024-09-29 16:30:00.0 +09:00:00) 

The instruments are as follows:
KOSPI2 Fut Mar21: 2024-06-14 0:00:00.0 +09:00:00
KOSPI2 Call Sep21: 2024-09-13 0:00:00.0 +09:00:00

For the theta calculation for the above instruments, 
the evaluation date is bumped to 2024-06-14 0:00:00.0 +09:00:00 which is the shortest maturity of the above instruments. 
Note that the theta calculation period may be too small to get accurate theta.

[2m2024-06-01T06:07:12.424835Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * theta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.425182Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.425543Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.425728Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T06:07:12.439585Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_structure calculation is done (engine id: 0, time = 0.01s whole time elapsed: 0.02s)
[2m2024-06-01T06:07:12.463687Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.04s)
[2m2024-06-01T06:07:12.477751Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_structure calculation is done (engine id: 0, time = 0.01s whole time elapsed: 0.05s)
[2m2024-06-01T06:07:12.495185Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_matrix calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.07s)
[2m2024-06-01T06:07:12.501917Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mexamples_toymodel[0m[2m:[0m Application finished 294.5812ms
[2m2024-06-01T06:22:42.751038Z[0m [32m INFO[0m [2mdataio_example[0m[2m:[0m DataIo finished Duration { seconds: 0, nanoseconds: 3105200 }
[2m2024-06-01T06:24:57.649221Z[0m [32m INFO[0m [2mdataio_example[0m[2m:[0m DataIo finished Duration { seconds: 0, nanoseconds: 2963000 }
[2m2024-06-01T11:50:53.018529Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m[1mEngine::with_parameter_data
[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
(engine-id: 0) Engine::with_parameter_data elapsed time: 189.4096ms

[2m2024-06-01T11:50:53.018859Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * npv calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.019030Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * fx exposure calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.019201Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.020036Z[0m [33m WARN[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m 
quantlib\src\pricing_engines\engine.rs:1799
<TAG>
engine-id: 0
instrument-types: Futures / Bond / VanillaPut
currencies: KRW
underlying-codes: KOSPI2

(Engine::calculate -> theta calculation)
There are instruments whose maturity is within the evaluation_date + theta_day (= 2024-09-29 16:30:00.0 +09:00:00) 

The instruments are as follows:
KOSPI2 Fut Mar21: 2024-06-14 0:00:00.0 +09:00:00
KOSPI2 Call Sep21: 2024-09-13 0:00:00.0 +09:00:00

For the theta calculation for the above instruments, 
the evaluation date is bumped to 2024-06-14 0:00:00.0 +09:00:00 which is the shortest maturity of the above instruments. 
Note that the theta calculation period may be too small to get accurate theta.

[2m2024-06-01T11:50:53.020276Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * theta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.020607Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.020970Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.021146Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_delta calculation is done (engine id: 0, time = 0.00s whole time elapsed: 0.00s)
[2m2024-06-01T11:50:53.035450Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_structure calculation is done (engine id: 0, time = 0.01s whole time elapsed: 0.02s)
[2m2024-06-01T11:50:53.059616Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * rho calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.04s)
[2m2024-06-01T11:50:53.073118Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * div_structure calculation is done (engine id: 0, time = 0.01s whole time elapsed: 0.05s)
[2m2024-06-01T11:50:53.091618Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mquantlib::pricing_engines::engine[0m[2m:[0m * vega_matrix calculation is done (engine id: 0, time = 0.02s whole time elapsed: 0.07s)
[2m2024-06-01T11:50:53.098667Z[0m [32m INFO[0m [1mmain (toymodel)[0m[2m:[0m [2mengine_example[0m[2m:[0m Application finished 301.3825ms
